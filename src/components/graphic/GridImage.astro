---
import type { HTMLAttributes } from 'astro/types'
import sharp, { type Sharp } from 'sharp'
import { readFile } from 'fs/promises'

import { compute } from '@/modules/compute/compute'
import OptimizedImage from './OptimizedImage.astro'
import type { Metadata } from './types'

interface Props extends HTMLAttributes<'svg'> {
	src: string | URL
	rows: number
	cols: number
	type?: 'webp' | 'png' | 'jpeg'
	imgProcessing?: (img: Sharp) => Promise<Sharp> | Sharp
}

let {
	src,
	rows,
	cols,
	type = 'webp',
	imgProcessing = (v) => v,
	...props
} = Astro.props

let { width, height, format, chunks } = await compute(
	[src, type, imgProcessing.toString()], // Used as cache key
	async (add) => {
		const img = await imgProcessing(sharp(await readFile(src)))

		let { width, height, format } = (await img.metadata()) as Metadata
		width = Math.floor(width / cols)
		height = Math.floor(height / rows)

		return {
			width,
			height,
			format,
			chunks: await Promise.all(
				Array.from({ length: cols }, (_, x) =>
					Array.from({ length: rows }, async (_, y) => ({
						x,
						y,
						src: await add(
							await img
								.clone()
								.extract({
									width,
									height,
									left: x * width,
									top: y * height,
								})
								[type]()
								.toBuffer(),
							type,
							`${x},${y}`,
						),
					})),
				).flat(),
			),
		}
	},
)
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox={`0 0 ${width * cols} ${height * rows}`}
	{...props}
>
	<g style={{ '--width': width, '--height': height }}>
		{
			chunks.map(({ src, x, y }) => (
				<foreignObject style={{ '--x': x, '--y': y }}>
					<OptimizedImage
						src={{ src, width, height, format }}
						alt={`${x},${y}`}
					/>
				</foreignObject>
			))
		}</g
	>
</svg>

<style>
	svg {
		foreignObject {
			x: calc(var(--x) * var(--width) * 1px);
			y: calc(var(--y) * var(--height) * 1px);
			width: calc(var(--width) * 1px);
			height: calc(var(--height) * 1px);

			* {
				text-align: center;
			}
		}
	}
</style>
