---
import type { HTMLAttributes } from 'astro/types'
import sharp, { type Sharp } from 'sharp'
import { readFile } from 'fs/promises'

import { compute } from '@/modules/compute/compute'
import OptimizedImage from './OptimizedImage.astro'
import type { Metadata } from './types'

interface Props extends HTMLAttributes<'svg'> {
	src: string | URL
	rows: number
	cols: number
	type?: 'webp' | 'png' | 'jpeg'
	imgProcessing?: (img: Sharp) => Promise<Sharp> | Sharp
}

let {
	src,
	rows,
	cols,
	type = 'webp',
	imgProcessing = (v) => v,
	...props
} = Astro.props

let { width, height, format, chunks } = await compute(
	[src, type, imgProcessing.toString()], // Used as cache key
	async (add) => {
		const img = await imgProcessing(sharp(await readFile(src)))

		let { width, height, format } = (await img.metadata()) as Metadata
		width = Math.floor(width / cols)
		height = Math.floor(height / rows)

		return {
			width,
			height,
			format,
			chunks: (
				await Promise.all(
					Array.from({ length: cols }, (_, x) =>
						Array.from({ length: rows }, async (_, y) => ({
							idx: x + y * cols,
							src: await add(
								await img
									.clone()
									.extract({
										width,
										height,
										left: x * width,
										top: y * height,
									})
									[type]()
									.toBuffer(),
								type,
								`${x},${y}`,
							),
						})),
					).flat(),
				)
			).sort(({ idx: a }, { idx: b }) => a - b),
		}
	},
)
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox={`0 0 ${width * cols} ${height * rows}`}
	{...props}
>
	<foreignObject
		style={{
			'--cols': cols,
			'--rows': rows,
		}}
	>
		<div>
			{
				chunks.map(({ src, idx }) => (
					<OptimizedImage
						src={{ src, width, height, format }}
						alt={idx.toString()}
					/>
				))
			}
		</div>
	</foreignObject>
</svg>

<style lang="scss">
	foreignObject {
		width: 100%;
		height: 100%;

		div {
			display: grid;
			grid-template-rows: repeat(var(--rows), 1fr);
			grid-template-columns: repeat(var(--cols), 1fr);
		}
	}
</style>
