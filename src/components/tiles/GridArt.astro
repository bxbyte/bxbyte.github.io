---
import { patterns } from './Patterns.global.astro'
import { getRandom } from '@/libs/random'
import type { HTMLAttributes } from 'astro/types'
import { gradients, grainUrl } from '@/styles/theme'

const patternValues = Object.values(patterns)

interface Props extends HTMLAttributes<'svg'> {
	width: number
	height: number
	seed: any
	gradient?: (typeof gradients)[keyof typeof gradients]
}

const {
		width,
		height,
		seed,
		gradient = gradients.main,
		...props
	} = Astro.props,
	random = getRandom(seed)

function randomPattern() {
	return patternValues[Math.round(random() * (patternValues.length - 1))]
}

const id = (getRandom(seed + width + '/' + height)() * (1 << 16)).toString(32)
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox={`0 0 ${width} ${height}`}
	aria-hidden="true"
	mask={grainUrl}
	{...props}
>
	<defs>
		<mask id={id} style={{ '--width': width, '--height': height }}>
			<rect width="100%" height="100%" fill="#fff"></rect>
			{
				Array.from({ length: width }, (_, x) =>
					Array.from({ length: height }, (_, y) => ({ x, y })),
				)
					.flat()
					.map((coord) => (
						<rect
							{...coord}
							style={{
								'--x': coord.x,
								'--y': coord.y,
								'--r': (() => {
									let rotationAxis = new Array(3).fill(0)
									rotationAxis[~~(3 * random())] = [1, -1][Math.round(random())]
									return rotationAxis.join()
								})(),
							}}
							fill={randomPattern()}
						/>
					))
			}
		</mask>
	</defs>
	<rect mask={`url(#${id})`} width="100%" height="100%" fill={gradient}></rect>
</svg>

<style lang="scss">
	svg {
		& mask > rect:not(:first-child) {
			--default-transform: scale(1.01);
			transform: var(--default-transform);
			transform-origin: calc((var(--x) + 0.5) * 1px)
				calc((var(--y) + 0.5) * 1px);
			fill-opacity: 1;
			transition: transform 0.5s ease-in-out;
			transition-delay: calc(
				// sqrt(pow(var(--x), 2) + pow(var(--y), 2)) /
				// 	(var(--width) + var(--height)) * 0.5s
				(var(--x) + var(--y)) / (var(--width) + var(--height)) * 0.5s
			);
			width: 1px;
			height: 1px;
		}

		&:hover mask > rect:not(:first-child) {
			transform: rotate3d(var(--r), 180deg) var(--default-transform);
		}
	}
</style>
