---
import type { HTMLAttributes } from 'astro/types'
import { Image } from 'astro:assets'
import sharp, { type Sharp } from 'sharp'
import { readFile } from 'fs/promises'
import { join } from 'path'

import { compute } from '@/modules/compute/compute'

interface Props extends HTMLAttributes<'svg'> {
	src: string
	rows?: number
	cols?: number
	type?: 'webp' | 'png' | 'jpeg'
	imgProcessing?: (img: Sharp) => Promise<Sharp> | Sharp
}

var {
	src,
	rows = 4,
	cols = 8,
	type = 'webp',
	imgProcessing = (v) => v,
	...props
} = Astro.props

src = join(process.cwd(), decodeURI(src))

let { width, height, chunks } = await compute(
	[src, type, imgProcessing.toString()], // Used as cache key
	async (add) => {
		const img = await imgProcessing(sharp(await readFile(src)))

		// Get chunk size
		let { width, height } = (await img.metadata()) as Record<string, number>

		width = Math.floor(width / cols)
		height = Math.floor(height / rows)

		return {
			width,
			height,
			// Slice image into chunks
			chunks: (
				await Promise.all(
					Array.from({ length: cols }, (_, x) =>
						Promise.all(
							Array.from({ length: rows }, async (_, y) => ({
								x,
								y,
								href: await add(
									await img
										.clone()
										.extract({
											width,
											height,
											left: x * width,
											top: y * height,
										})
										[type]()
										.toBuffer(),
									type,
								),
							})),
						),
					),
				)
			).flat(),
		}
	},
)
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox={`0 0 ${width * cols} ${height * rows}`}
	{...props}
>
	<g style={{ '--width': width, '--height': height }}>
		{
			chunks.map(({ href, x, y }) => (
				<foreignObject style={{ '--x': x, '--y': y }}>
					<Image src={href} width={width} height={height} alt={`${x}x${y}`} />
				</foreignObject>
			))
		}</g
	>
</svg>

<style>
	svg {
		foreignObject {
			x: calc(var(--x) * var(--width) * 1px);
			y: calc(var(--y) * var(--height) * 1px);
			width: calc(var(--width) * 1px);
			height: calc(var(--height) * 1px);

			* {
				text-align: center;
			}
		}
	}
</style>
