---
import type { HTMLAttributes } from 'astro/types'
import { Image } from 'astro:assets'
import sharp, { type Sharp } from 'sharp'
import { readFile } from 'fs/promises'
import { join } from 'path'
import config from '!/astro.config'

import { setDynamicPaths } from '@/integrations/assets'

type SharpMethod = {
	[k in keyof Sharp as Sharp[k] extends Function ? k : never]: Sharp[k]
}
type SharpCall = {
	[K in keyof SharpMethod]: { call: K; params?: Parameters<Sharp[K]> }
}[keyof SharpMethod]

interface Props extends HTMLAttributes<'svg'> {
	src: ImageMetadata
	rows?: number
	cols?: number
	type?: 'webp' | 'png' | 'jpeg'
	sharpCallbacks?: SharpCall[]
}

var {
	src: { src },
	rows = 4,
	cols = 4,
	type = 'webp',
	sharpCallbacks,
	...props
} = Astro.props

src = src.replace(/^\/@fs|\?[^?]*$/gm, '')
if (import.meta.env.PROD)
	src = join(process.cwd(), config.outDir || '/dist', src)

var img = sharp(await readFile(src))

if (sharpCallbacks) {
	sharpCallbacks.forEach(async ({ call, params }) => {
		img = await (params ? (img[call] as any)(...params) : (img[call] as any)())
	})
}

var { width, height } = (await img.metadata()) as Record<string, number>
width = ~~(width / cols)
height = ~~(height / rows)

const chunks = await setDynamicPaths(
	async () =>
		(
			await Promise.all(
				Array.from({ length: cols }, (_, x) =>
					Promise.all(
						Array.from({ length: rows }, async (_, y) => ({
							value: await img
								.clone()
								.extract({
									width,
									height,
									left: x * width,
									top: y * height,
								})
								[type]()
								.toBuffer(),
							x,
							y,
						})),
					),
				),
			)
		).flat(),
	type,
	[src, type, rows, cols, sharpCallbacks], // Use this combinaison as cache key
)
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox={`0 0 ${width * cols} ${height * rows}`}
	{...props}
>
	<g style={{ '--width': width, '--height': height }}>
		{
			chunks.map(({ href, x, y }) => (
				<foreignObject style={{ '--x': x, '--y': y }}>
					<Image src={href} width={width} height={height} alt={`${x}x${y}`} />
				</foreignObject>
			))
		}</g
	>
</svg>

<style>
	svg {
		foreignObject {
			x: calc(var(--x) * var(--width) * 1px);
			y: calc(var(--y) * var(--height) * 1px);
			width: calc(var(--width) * 1px);
			height: calc(var(--height) * 1px);

			* {
				text-align: center;
			}
		}
	}
</style>
