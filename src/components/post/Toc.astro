---
interface Props {
	name: string
	track?: boolean
	items: ({ text: string; lvl?: number; href: string } | string)[]
}

const { name, items, track = false } = Astro.props
---

<script>
	type Item = { ref: HTMLLIElement; order: number }

	type TrackedToc = {
		io: IntersectionObserver
		items: Map<HTMLElement, Item>
		current: HTMLLIElement
		targetInViewport: Set<Item>
	}

	class Toc extends HTMLUListElement {
		track!: TrackedToc
		disconnectedCallback!: () => void

		async connectedCallback() {
			if (this.dataset.track != undefined) {
				this.track = {
					items: new Map(),
					targetInViewport: new Set(),
					current: (this.lastElementChild as HTMLUListElement)
						.firstElementChild as HTMLLIElement,
					// Update items in view
					io: new IntersectionObserver((entries) =>
						entries.map((entry) => {
							let item = this.track.items.get(
								entry.target as HTMLLIElement,
							) as Item
							if (entry.isIntersecting) {
								this.track.targetInViewport.add(item)
							} else this.track.targetInViewport.delete(item)
						}),
					),
				}

				// Set default item
				this.track.current.classList.add('active')

				this.querySelectorAll('a').forEach(async (el, order) => {
					const targetId = el.href.replace(/[^#]*#/, '')
					let target: HTMLElement | null,
						tryIdx = 0
					while (
						!(target = document.getElementById(targetId)) &&
						tryIdx++ < 100
					) {
						await new Promise((res) => setTimeout(res, 100))
					}
					if (target) {
						this.track.io.observe(target)
						this.track.items.set(target, {
							ref: el.parentElement as HTMLLIElement,
							order,
						})
					}
				})

				// Update current item on scroll
				const onScroll = this.onScroll.bind(this)
				document.addEventListener('scroll', onScroll)

				// Make sure to destroy the events
				this.disconnectedCallback = () => {
					document.removeEventListener('scroll', onScroll)
				}
			}
		}

		onScroll() {
			const item = [...this.track.targetInViewport].sort(
				(a, b) => a.order - b.order,
			)[0]
			if (item) {
				this.setCurrentItem(item)
			}
		}

		setCurrentItem(item: Item) {
			this.track.current?.classList.toggle('active', false)
			this.track.current = item.ref
			this.track.current.classList.toggle('active', true)
		}
	}

	customElements.define('ul-toc', Toc, { extends: 'ul' })
</script>

<ul is="ul-toc" data-track={track}>
	<li>{name}</li>
	<ul>
		{
			items.map((item) => {
				if (typeof item == 'string') return <li>{item}</li>

				let { text, lvl, ...props_ } = item,
					props = props_ as any

				if (lvl && lvl > 1) props.style = `--lvl:${lvl}`

				return (
					<li>
						<a {...props}>{text}</a>
					</li>
				)
			})
		}
	</ul>
</ul>

<style is:global>
	html {
		scroll-behavior: smooth;
	}
</style>

<style lang="scss">
	$border-size: 1px;

	[is='ul-toc'] {
		--lvl: 1;

		position: relative;

		& > li {
			font-weight: bold;
			font-size: 0.85em;
			text-transform: uppercase;
		}

		ul {
			display: flex;
			flex-direction: column;
			gap: 0.2em;
			margin-top: 0.25em;
			border-left: $border-size solid theme.$color-grey;

			li {
				display: flex;
				cursor: pointer;
				margin-left: -$border-size;
				border-left: $border-size solid theme.$color-grey;

				&:hover {
					background: color-mix(in srgb, theme.$color-grey, transparent 50%);
				}

				&.active {
					border-color: theme.$color-main;
					color: theme.$color-main;
				}

				a {
					padding-left: calc(0.5em * var(--lvl));
					width: 100%;
					overflow: hidden;
					text-overflow: ellipsis;
					white-space: nowrap;
				}
			}
		}
	}
</style>
