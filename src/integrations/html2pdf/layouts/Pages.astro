---
import type { HTMLAttributes } from 'astro/types'

interface Props extends HTMLAttributes<'div'> {
	'no-margin': boolean
	'no-padding': boolean
	padding?: string
	margin?: string
}

function parseBox(box: string) {
	const sizes = box.split(/\s+/)
	switch (sizes.length) {
		case 2: {
			return {
				top: sizes[0],
				bottom: sizes[0],
				left: sizes[1],
				right: sizes[1],
			}
		}
		case 4: {
			return {
				top: sizes[0],
				right: sizes[1],
				bottom: sizes[2],
				left: sizes[3],
			}
		}
		default: {
			return {
				top: sizes[0],
				bottom: sizes[0],
				left: sizes[0],
				right: sizes[0],
			}
		}
	}
}

function prefixKeysSuffixValues(
	prefix: string,
	suffix: string,
	obj: Record<string, any>,
) {
	return Object.fromEntries(
		Object.entries(obj).map(([k, v]) => [prefix + k, v + suffix]),
	)
}

const {
		'no-padding': noPadding,
		'no-margin': noMargin,
		padding: paddingString,
		margin: marginString,
		class: classString,
		...props
	} = Astro.props,
	padding = noPadding
		? prefixKeysSuffixValues('padding-', '!important', parseBox('0%'))
		: paddingString &&
			prefixKeysSuffixValues('padding-', '!important', parseBox(paddingString)),
	margin = noMargin
		? prefixKeysSuffixValues('margin-', '!important', parseBox('0%'))
		: marginString &&
			prefixKeysSuffixValues('margin-', '!important', parseBox(marginString))
---

<div {...props} class:list={[classString, 'page']}>
	<slot />
</div>

<style lang="scss" define:vars={{ ...padding, ...margin }}>
	div {
		// background-color: red;
	}

	:global(.pagedjs_sheet):has(.page) {
		// --pagedjs-padding-left: var(--padding-left);
		// --pagedjs-padding-right: var(--padding-right);
		// --pagedjs-padding-top: var(--padding-top);
		// --pagedjs-padding-bottom: var(--padding-bottom);
		// --pagedjs-margin-left: var(--margin-left);
		// --pagedjs-margin-right: var(--margin-right);
		// --pagedjs-margin-top: var(--margin-top);
		// --pagedjs-margin-bottom: var(--margin-bottom);

		// :global(.pagedjs_pagebox) > *:global(:not(.pagedjs_area)),
		// :global(.pagedjs_pagebox) > *:global(:not(.pagedjs_area)) * {
		// 	display: none !important;
		// }

		// :global([class^='pagedjs_margin']) {
		// 	display: none;
		// }

		// :global(.pagedjs_area) {
		// 	grid-column: unset;
		// 	background-color: red;
		// }
	}

	// @mixin noMargin {
	// 	--pagedjs-margin-left: 0%;
	// 	--pagedjs-margin-right: 0%;
	// 	--pagedjs-margin-top: 0%;
	// 	--pagedjs-margin-bottom: 0%;

	// 	:global(.pagedjs_pagebox) > *:global(:not(.pagedjs_area)) * {
	// 		display: none !important;
	// 	}

	// 	:global(.pagedjs_area) {
	// 		grid-column: unset;
	// 	}
	// }
</style>
