---
import { useLocaleContents } from '@/libs/i18n'
import { getPostsByLocale } from '@/content'

import PDF from '@/integrations/html2pdf/print'
import { Block } from '@/components/sections'
import Ariane from '@/components/navigation/Ariane.astro'
import Main from '@/layouts/Main'
import type { BlogPosting } from 'schema-dts'
import Toc from '@/components/navigation/Toc.astro'
import Comments from '@/components/Comments.astro'

import './_page.scss'
import postStyles from './_post.module.scss'
import contentStyles from './_content.module.scss'

import renderPostMdx from '@/libs/post-renderer'

import type { PostHydrated } from '@/content'
import { Image } from 'astro:assets'

interface Props {
	post: PostHydrated
}

export const { getStaticPaths, getLocaleContent } = useLocaleContents(
	{
		toc: {
			headings: {
				fr: 'Table des matiÃ¨res',
				en: 'Table of content',
			},
			figures: {
				fr: 'Table des figures',
				en: 'Table of figure',
			},
			tables: {
				fr: 'Table des tableaux',
				en: 'Table of table',
			},
		},
	},
	async () => {
		return Object.entries(await getPostsByLocale()).flatMap(([locale, posts]) =>
			posts.map((post) => ({
				params: { locale, hash: post.hash },
				props: { post },
			})),
		)
	},
)

const {
		post: { hash, data },
	} = Astro.props,
	content = getLocaleContent(Astro),
	{ cover, type, title, description, keywords, date } = data,
	{ toc, rendered, rawFrontmatter } = await renderPostMdx(Astro.props.post)

var pdfData: Parameters<typeof PDF>[0] | undefined

if (type == 'pdf')
	pdfData = {
		...rawFrontmatter,
		authors: data.authors && data.authors.map(({ name }) => name),
		targetSelector: '.pdf',
	}
---

<Main
	head={{
		title,
		meta: {
			description,
			og: {
				title,
				description,
				type: 'article',
			},
			keywords,
		},
		script: [
			{
				type: 'application/ld+json',
				content: JSON.stringify({
					'@context': 'https://schema.org',
					'@type': 'BlogPosting',
					headline: title,
					datePublished: date.toDateString(),
				} as BlogPosting),
			},
		],
	}}
>
	<Block tag="section">
		<header>
			<h1 transition:name={hash + '-t'} style="grid-area:title">{title}</h1>
			<Ariane
				style="grid-area:arianne"
				displayPath={Astro.url.pathname.replace(/[^/]*\/?$/, '') + title}
			/>
			{
				cover && (
					<Image
						transition:name={hash + '-i'}
						alt="Illustration cover"
						src={cover}
					/>
				)
			}
			{
				description && (
					<p transition:name={hash + '-d'} style="grid-area:desc">
						{description}
					</p>
				)
			}
		</header>
		{
			pdfData ? (
				<section class:list={['pdf', contentStyles.content]}>
					<PDF {...pdfData}>
						<Fragment set:html={rendered} />
					</PDF>
				</section>
			) : (
				<section class:list={[postStyles.post, contentStyles.content]}>
					<Fragment set:html={rendered} />
				</section>
			)
		}
		<nav>
			<div>
				{
					toc.headings.length > 0 && (
						<Toc name={content.toc.headings} track items={toc.headings} />
					)
				}{
					toc.figures.length > 0 && (
						<Toc name={content.toc.figures} items={toc.figures} />
					)
				}{
					toc.tables.length > 0 && (
						<Toc name={content.toc.tables} items={toc.tables} />
					)
				}
			</div>
		</nav>
		<footer>
			<Comments discussion={`Post #${hash}`} />
		</footer>
	</Block>
</Main>

<style lang="scss">
	@use '@/styles/layout.module.scss' as layout;

	main {
		display: flex;
		justify-content: center;

		& > section {
			display: grid;
			grid-template-areas:
				'h h h'
				'c c s'
				'f f f';
			grid-auto-columns: 1fr;
			gap: 2em;

			& > header {
				display: flex;
				grid-area: h;
				flex-direction: column;
				gap: 1em;

				img {
					filter: grayscale(1);
					border-radius: 1em;
					width: 100%;
					height: 10em;
					object-fit: cover;
				}
			}

			& > nav {
				grid-area: s;

				& > div {
					position: sticky;
					top: layout.$window-padding-y;
					height: fit-content;
				}
			}

			& > footer {
				grid-area: f;
			}

			& > section {
				display: flex;
				grid-area: c;

				&.pdf {
					@media screen, pagedjs-ignore {
						:global(.pagedjs_pages) {
							display: flex;
							flex-flow: row wrap;
							justify-content: center;
							align-items: center;
							gap: 2em;
						}

						:global(.pagedjs_page) {
							border: 1px solid theme.$color-grey;
							background-color: theme.$color-white;
						}
					}
				}
			}
		}
	}
</style>
