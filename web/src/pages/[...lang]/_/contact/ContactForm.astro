---
import { Button, Field } from "@/components"
import locales from "./locales"
import { getLocaleContent } from "@/modules/i18n/content"
import { Icon } from "astro-icon/components"

const content = getLocaleContent(locales, Astro)
---

<script>
	import { FORMSPREE_ID } from "astro:env/client"

	class ContactForm extends HTMLFormElement {
		connectedCallback() {
			this.addEventListener("submit", async () => {
				this.sending = true
				const res = await fetch(`https://formspree.io/f/${FORMSPREE_ID}`, {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
						Accept: "application/json",
					},
					body: JSON.stringify(
						Object.fromEntries(new FormData(this))
					),
				})
				this.sending = false
				this.reset()
			})
		}

		set sending(state: boolean) {
			this.classList.toggle("sending", state)
		}
	}

	customElements.define("contact-form", ContactForm, { extends: "form" })
</script>

<form is="contact-form" onsubmit="return false">
	<fieldset>
		<Field name="name" required placeholder={content.form.name} />
		<Field name="email" type="email" required placeholder={content.form.email} />
	</fieldset>
	<Field name="subject" required placeholder={content.form.subject} />
	<Field
		el="textarea"
		name="message"
		required
		placeholder={content.form.message}
		rows="6"
	/>
	<fieldset>
		<Button type="submit">{content.form.send}</Button>
		<Button variant="secondary" type="reset">
			{content.form.clear}
			<Icon name="mdi:trash" />
		</Button>
	</fieldset>
</form>

<style lang="scss">
	$send-icon: url(svg(
		'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">'
			'<g fill="none">'
				'<path d="m12.594 23.258l-.012.002l-.071.035l-.02.004l-.014-.004l-.071-.036q-.016-.004-.024.006l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.016-.018m.264-.113l-.014.002l-.184.093l-.01.01l-.003.011l.018.43l.005.012l.008.008l.201.092q.019.005.029-.008l.004-.014l-.034-.614q-.005-.019-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.003-.011l.018-.43l-.003-.012l-.01-.01z"/>'
				'<path fill="currentColor" d="M20.235 5.686c.432-1.195-.726-2.353-1.921-1.92L3.709 9.048c-1.199.434-1.344 2.07-.241 2.709l4.662 2.699l4.163-4.163a1 1 0 0 1 1.414 1.414L9.544 15.87l2.7 4.662c.638 1.103 2.274.957 2.708-.241z"/>'
			'</g>'
		'</svg>'
	));
	$load-icon: url(svg(
		'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">'
			'<path fill="none" stroke="currentColor" stroke-dasharray="16" stroke-dashoffset="16" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3c4.97 0 9 4.03 9 9">'
				'<animate fill="freeze" attributeName="stroke-dashoffset" dur="0.2s" values="16;0"/>'
				'<animateTransform attributeName="transform" dur="1.5s" repeatCount="indefinite" type="rotate" values="0 12 12;360 12 12"/>'
			'</path>'
		'</svg>'
	));

	form {
		display: flex;
		flex-direction: column;
		gap: 1em;

		& > fieldset {
			display: flex;
			flex-flow: row wrap;
			gap: 1em;

			&:global(>div) {
				
				&:has([name="name"]) {
					flex-grow: 1;
					width: 16ch;
				}

				&:not(:has([name="name"])) {
					flex-grow: 2;
				}
			}
		}

		textarea {
			resize: none;
		}

		button[type="submit"]::after {
			$size: 1em;
			content: '';
			width: $size;
			height: $size;
			color: currentColor;
			mask-image: $send-icon;
			mask-size: 100% 100%;
			background-color: currentColor;
		}

		&.sending button[type="submit"] {
			pointer-events: none;
			opacity: .5;

			&:after {
				mask-image: $load-icon;
			}
		}
	}
</style>
