---
import { Section } from "@/layouts"
import { getLocaleContent } from "@/modules/i18n/content"
import locales from "./locales"
import { GridPicture, SharpPicture, getMeta, withCanvas, withSteps } from "@/modules/picture/components"
import backImgPath from "./back.png?path"
import ppImg from "./pp.png"
import { md } from "@/modules/composer/server"
import { mulberry32 } from "@/modules/composer/utils"

const content = getLocaleContent(locales, Astro)
---

<Section id="welcome">
	<GridPicture
		slot="back"
		src={backImgPath}
		rows={2}
		cols={8}
		preserveAspectRatio="xMidYMin slice"
		computeImg={
			withSteps(
				async (src) => {
					const scale = 0.4
					let {width, height} = await getMeta(src)
					width = (Math.round(width * scale) >> 1) << 1
					height = (Math.round(height * scale) >> 1) << 1
					return src
						.resize({
							width,
							height,
							fit: "contain",
						})
						.greyscale()
						.png({ quality: 1, compressionLevel: 9, palette: true })
				},
				withCanvas(async (ctx, cvs) => {
					const rand = mulberry32(42)
					const d = ctx.getImageData(0, 0, cvs.width, cvs.height)
					for (let i = 3; i < d.data.length; i += 4) {
						if (d.data[i] && Math.round(rand() * 2))
							d.data[i] = .5
					}
					ctx.putImageData(d, 0, 0)
				}),
				src => src.webp({quality: 50, alphaQuality: 0})
			)
		}
	/>

	<div class="hi">
		<p>{content.hi}</p>
		<h1>{content.iam}</h1>
		<p>{content.status}</p>
	</div>

	<div class="infos">
		<SharpPicture 
			src={ppImg}
			computeImg={img => img.greyscale()}
			alt="Picture profile"
			width="512"
			height="512"
		/>
		<Fragment set:html={md(content.what)} />
	</div>

	<p class="footer">{content.easteregg}</p>

	<style lang="scss">
		@use "@/styles/layout.module.scss";

		:global(.back) {
			display: flex;
			align-items: flex-end;
			background-color: theme.$color-white;
			user-select: none;
			mask: linear-gradient(#fff 80%, transparent);

			svg {
				filter: contrast(calc(0.75 + 1 * theme.$bool-is-dark))
					brightness(calc(0.5 + (1 - theme.$bool-is-dark)));
				width: 100%;
				height: 50%;
			}
		}

		:global(#welcome) {
			display: grid;
			grid-template-areas:
				". ."
				". ."
				"a a"
				"b b"
				". f";
			clip-path: inset(0 0 0 0);
			min-height: min(100vh, layout.$window-max-width / 1.33);
		}

		.hi {
			grid-area: a;
			font-size: 1.75rem;

			h1 {
				font-size: 2em;
			}
		}

		.infos {
			grid-area: b;
			backdrop-filter: blur(0.5rem) brightness(115%);
			box-sizing: border-box;
			margin: auto;
			border: 1px solid theme.$color-dark-grey;
			border-radius: 0.5rem;
			padding: 0.75rem;
			width: 100%;
			height: fit-content;

			picture {
				width: 3em;
				height: 3em;
				margin-right: .75em;
				float: inline-start;
			}
		}

		.footer {
			grid-area: f;
			margin: auto 0 0 auto;
			color: theme.$color-black;
		}
	</style>
</Section>
