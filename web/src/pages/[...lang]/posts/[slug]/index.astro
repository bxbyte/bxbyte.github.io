---
import { useLocaleContents } from "@/modules/i18n/content"
import { getPostsByLocale } from "@/content"

import PDF from "@/modules/html2pdf/print"
import { Block, Main, Section } from "@/layouts"
import { Graph, Comments, Toc, BreadCrumbs } from "@/components"
import type { BlogPosting } from "schema-dts"

import locales from "./_locales"
import postStyles from "./_post.module.scss"
import contentStyles from "./_content.module.scss"

import renderPostMdx from "@/libs/server/post-renderer"

import type { PostHydrated } from "@/content"
import PostCover from "@/components/post/PostCover.astro"

interface Props {
	post: PostHydrated
}

export const { getStaticPaths, getLocaleContent } = useLocaleContents(
	locales,
	async () => {
		return Object.entries(await getPostsByLocale()).flatMap(
			([locale, posts]) => posts.map(({slug, ...post}) => ({
				params: { slug },
				props: { post },
			}))
		)
	}
)

const {
		post: { slug, data },
	} = Astro.props,
	content = getLocaleContent(Astro),
	{ cover, type, title, description, keywords, date } = data,
	{ toc, rendered, rawFrontmatter } = await renderPostMdx(Astro.props.post)

var pdfData: Parameters<typeof PDF>[0] | undefined

if (type == "pdf")
	pdfData = {
		...rawFrontmatter,
		authors: data.authors && data.authors.map(({ name }) => name),
		targetSelector: ".pdf",
	}
---

<Main
	head={{
		title,
		meta: {
			description,
			og: {
				title,
				description,
				type: "article",
			},
			keywords,
		},
		script: [
			{
				type: "application/ld+json",
				content: JSON.stringify({
					"@context": "https://schema.org",
					"@type": "BlogPosting",
					headline: title,
					datePublished: date.toDateString(),
				} as BlogPosting),
			},
		],
	}}
>
	<Section id="content">
		<header>
			<h1>{title}</h1>
			<p>{description}</p>
			{cover && <PostCover cover={cover}/>}
		</header>
		{
			pdfData ? (
				<section class:list={["pdf", contentStyles.content]}>
					<PDF {...pdfData}>
						<Fragment set:html={rendered} />
					</PDF>
				</section>
			) : (
				<section class:list={[postStyles.post, contentStyles.content]}>
					<Fragment set:html={rendered} />
				</section>
			)
		}
		<nav>
			<!-- <Graph /> -->
			<div>
				{
					toc.headings.length > 0 && (
						<Toc
							name={content.toc.headings}
							track
							items={toc.headings}
						/>
					)
				}{
					toc.figures.length > 0 && (
						<Toc name={content.toc.figures} items={toc.figures} />
					)
				}{
					toc.tables.length > 0 && (
						<Toc name={content.toc.tables} items={toc.tables} />
					)
				}
			</div>
		</nav>
		<footer>
			<Comments discussion={`Post #${slug}`} />
		</footer>
	</Section>
</Main>

<style lang="scss">
	@use "@/styles/layout.module.scss" as layout;

	:global(#content) {
		display: grid;
		grid-template-columns: 1fr .25fr;
		grid-template-areas: 
			'h h'
			'c n'
			'f f';
		gap: 2em;

		section {
			grid-area: c;
		}
	}

	header {
		grid-area: h;
		display: flex;
		flex-direction: column;
		gap: 1em;
		padding: 4em 2em;
		align-items: center;
		text-align: center;
		text-wrap: balance;
		border-top: 1px solid currentColor;
		border-bottom: 1px solid currentColor;
		background: theme.$texture-cross;

		picture {
			max-height: 50vh;
			// aspect-ratio: 4 / 3;
			border-radius: 1em;
			filter: brightness(calc(1 - .1 * (theme.$bool-is-dark)));
			margin-top: 1em;
		}
	}

	footer {
		grid-area: f;
	}

	nav {
		grid-area: n;
		position: sticky;
		
		& > div {
			position: sticky;
			top: layout.$window-padding-y;
			height: fit-content;
			display: flex;
			flex-direction: column;
			gap: 2em;
		}
	}
</style>
