---
import { Picture as AstroPicture } from "astro:assets" // Use Astro native solution in the background
import { p } from "@/modules/composer/server"

type PictureProps = component.Props_<typeof AstroPicture>

type Props = Pick<
	component.Props_<typeof AstroPicture>,
	"src" | "alt" | "width" | "height"
> & PictureProps["pictureAttributes"] & {
	noPlaceholder?: boolean
}

const { src, alt, width, height, noPlaceholder, ...rawProps } = Astro.props,
	props = p(rawProps)
		.with("is", "optimized-image")
		.with("class", "loading")
		.with("class", noPlaceholder && "nop")
---

<script>
	import { define } from "@/modules/composer/client"

	@define("optimized-image", { extends: "picture" })
	class Picture extends HTMLPictureElement {
		connectedCallback() {
			const img = this.lastElementChild as HTMLImageElement
			if (img.complete) this.setLoaded()
			else
				img.addEventListener("load", this.setLoaded.bind(this), {
					once: true,
				})
		}

		setLoaded() {
			this.classList.remove("loading")
		}
	}
</script>

<AstroPicture
	format="avif"
	formats={["avif", "webp", "jpg"]}
	fallbackFormat="webp"
	src={src as ImageMetadata}
	alt={alt}
	width={width}
	height={height}
	densities={[.5, 1]}
	pictureAttributes={props.end()}
/>

<style lang="scss">
	picture {
		position: relative;
		overflow: hidden;

		img,
		&::after {
			width: 100%;
			height: 100%;
			object-fit: cover;
			transition: opacity .25s ease-in-out;
		}

		&:not(.nop)::after {
			position: absolute;
			top: 0;
			left: 0;
			align-content: center;
			content: '';
			background-image: theme.$texture-checkboard;
			color: theme.$color-black;
			text-align: center;
		}

		&.loading img {
			opacity: 0;
		}
		
		&:not(.loading)::after {
			opacity: 0;
		}
	}
</style>
