---
import type { HTMLAttributes } from "astro/types"

import { compute } from "@/modules/compute/compute"
import { Image } from "."
import { loadSharpProps, getMeta, type SharpImageProps } from "./sharp"

type Props = HTMLAttributes<"svg"> & SharpImageProps & {
	rows: number
	cols: number
	type?: "webp" | "png" | "jpeg"
}

const {
	loadSharp,
	props: {
		rows,
		cols,
		type = "webp",
		...props
	}
} = loadSharpProps(Astro.props)

let { width, height, format, chunks } = await compute(
	Astro.props,
	async (add) => {
		const src = await loadSharp()

		let { width, height, format } = await getMeta(src)
		width = Math.floor(width / cols)
		height = Math.floor(height / rows)

		return {
			width,
			height,
			format,
			chunks: (
				await Promise.all(
					Array.from({ length: cols }, (_, x) =>
						Array.from({ length: rows }, async (_, y) => ({
							idx: x + y * cols,
							src: await add(
								await src
									.clone()
									.extract({
										width,
										height,
										left: x * width,
										top: y * height,
									})
									[type]()
									.toBuffer(),
								type,
								`${x},${y}`
							),
						}))
					).flat()
				)
			).sort(({ idx: a }, { idx: b }) => a - b),
		}
	}
)
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox={`0 0 ${width * cols} ${height * rows}`}
	{...props}
>
	<foreignObject
		style={{
			"--cols": cols,
			"--rows": rows,
		}}
	>
		<div>
			{
				chunks.map(({ src, idx }) => (
					<Image
						src={{ src, width, height, format }}
						alt={idx.toString()}
						noPlaceholder
					/>
				))
			}
		</div>
	</foreignObject>
</svg>

<style lang="scss">
	foreignObject {
		width: 100%;
		height: 100%;

		div {
			display: grid;
			grid-template-rows: repeat(var(--rows), 1fr);
			grid-template-columns: repeat(var(--cols), 1fr);
		}
	}
</style>
