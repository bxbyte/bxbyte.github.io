---
import type { HTMLAttributes } from "astro/types"

interface Props extends HTMLAttributes<"div"> {
	"no-margin": boolean
	"no-padding": boolean
	padding?: string
	margin?: string
}

function parseBox(box: string) {
	const sizes = box.split(/\s+/)
	switch (sizes.length) {
		case 2: {
			return {
				top: sizes[0],
				bottom: sizes[0],
				left: sizes[1],
				right: sizes[1],
			}
		}
		case 4: {
			return {
				top: sizes[0],
				right: sizes[1],
				bottom: sizes[2],
				left: sizes[3],
			}
		}
		default: {
			return {
				top: sizes[0],
				bottom: sizes[0],
				left: sizes[0],
				right: sizes[0],
			}
		}
	}
}

function prefixKeysSuffixValues(
	prefix: string,
	suffix: string,
	obj: Record<string, any>
) {
	return Object.fromEntries(
		Object.entries(obj).map(([k, v]) => [prefix + k, v + suffix])
	)
}

const {
		"no-padding": noPadding,
		"no-margin": noMargin,
		padding: paddingString,
		margin: marginString,
		class: classString,
		...props
	} = Astro.props,
	padding = noPadding
		? prefixKeysSuffixValues("padding-", "!important", parseBox("0%"))
		: paddingString &&
			prefixKeysSuffixValues(
				"padding-",
				"!important",
				parseBox(paddingString)
			),
	margin = noMargin
		? prefixKeysSuffixValues("margin-", "!important", parseBox("0%"))
		: marginString &&
			prefixKeysSuffixValues(
				"margin-",
				"!important",
				parseBox(marginString)
			)
---

<div {...props} class:list={[classString, "page"]}>
	<slot />
</div>
