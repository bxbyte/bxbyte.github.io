---
import type { PostReferenceData } from "@/content"
import { $compute, compute } from "@/modules/compute/compute"
import type { HTMLAttributes } from 'astro/types'

type Props = HTMLAttributes<'object'> & {
    label?: string
    posts: PostReferenceData[]
}

const { posts, label, ...props } = Astro.props,
    postsRefDataURL = await compute(posts, (add) => add(JSON.stringify(posts), "json"), "relative")

---

<script>
	import type { PostReferenceData } from "@/content"
	import { define } from "@/modules/composer/client"
    import { 
        type Simulation,
        type ForceLink,
        type SimulationLinkDatum,
        type SimulationNodeDatum,
        select, schemePastel1, scaleOrdinal, forceSimulation, forceLink, forceManyBody, forceX, forceY, drag
    } from "d3"

    type PostNode = SimulationNodeDatum & PostReferenceData & { radius: number, type: string }
    type Link = SimulationLinkDatum<PostNode>
    type NodeEvent = { active: boolean, x: number, y: number, subject: SimulationNodeDatum }
    
    const color = scaleOrdinal(schemePastel1);
    const strongURLForceRegexp = /^((?:[a-z]+:\/\/[^\/?#]+)|\.)/gm
    
    @define("post-graph", { extends: "div" })
	class SVGGraph extends HTMLDivElement {
        simulation: Simulation<PostNode, SimulationLinkDatum<PostNode>>
        svg
        tooltip
        posts: PostNode[]
        nodes: PostNode[]
        padding = 20
        scale = 3
        // dataset: { href: string }
        
		async connectedCallback() {
            this.svg = select(this.firstElementChild as SVGSVGElement)
            this.tooltip = this.genTooltip();
            this.posts = await (await fetch(this.dataset.href)).json()

            const tagForce = this.addRelationForce({
                    nodes: this.posts,
                    attr: "tags",
                    force: 2
                }),
                weakURLForce = this.addRelationForce({
                    nodes: this.posts,
                    attr: "links",
                    force: 1
                }),
                strongURLForce = this.addRelationForce({
                    nodes: weakURLForce.nodes,
                    attr: "slug",
                    force: 2,
                    aggregator: (slug) => strongURLForceRegexp.exec(slug)?.[0]
                })

            this.nodes = [
                ...this.posts.map(p => ({ ...p, radius: p.tags?.length ?? 0, type: 'post'})),
                ...tagForce.nodes,
                ...weakURLForce.nodes,
                ...strongURLForce.nodes,
            ]
            const links = [
                    ...tagForce.links,
                    ...weakURLForce.links,
                    ...strongURLForce.links,
                ]
            
            this.simulation = forceSimulation(this.nodes)
                .force("link", tagForce.force.id(d => d.slug))
                .force("link", weakURLForce.force.id(d => d.slug))
                .force("link", strongURLForce.force.id(d => d.slug))
                .force("charge", forceManyBody())
                .force("x", forceX())
                .force("y", forceY());

            const SVGlinks = this.svg.append("g")
                .attr("stroke", "currentColor")
                .attr("stroke-opacity", 0.5)
                .selectAll("line")
                .data(links)
                .join("line")
                .attr("stroke-width", 2);

            const SVGNodes = this.svg.append("g")
                .attr("stroke", "currentColor")
                .attr("stroke-width", 1)
                .selectAll("circle")
                .data(this.nodes)
                .join("circle")
                .attr("r", (d: PostNode) => 3 * (1 + Math.log(1 + (d.radius))))
                .attr("fill", (d: PostNode) => color(d.type));
            
            // Render simulation
            this.simulation.on("tick", () => {
                SVGlinks
                    .attr("x1", d => d.source.x)
                    .attr("y1", d => d.source.y)
                    .attr("x2", d => d.target.x)
                    .attr("y2", d => d.target.y);

                SVGNodes
                    .attr("cx", d => d.x)
                    .attr("cy", d => d.y);
            });

            this.updateViewport()

            // Add controls
            SVGNodes
                .call(drag()
                .on("start", this.#dragstarted.bind(this))
                .on("drag", this.#dragged.bind(this))
                .on("end", this.#dragended.bind(this)))
                .on("mouseover", this.#updateTooltip.bind(this))
                .on("mouseleave", this.#disableTooltip.bind(this))
		}

        addRelationForce<K extends keyof PostReferenceData>({
            attr,
            nodes,
            force,
            aggregator = (v) => v
        }: {
            nodes: PostNode[],
            attr: K,
            force: number,
            aggregator?: (item: { [k in K]: PostReferenceData[k], post: PostReferenceData}) => string | undefined,
        }): {
            nodes: PostNode[],
            links: { value: string, post: PostReferenceData }[],
            force: ForceLink<SimulationNodeDatum, { source: any, target: any}>
        } {
            const prelinks = Object.groupBy(
                    nodes
                        .flatMap(post => (
                            Array.isArray(post[attr]) 
                            ? post[attr]?.map(value => ({
                                value: aggregator(value),
                                post
                            }))
                            : [{
                                value: aggregator(post[attr]),
                                post
                            }]
                        )),
                    post => post.value
                ),
                outnodes = Object.entries(prelinks)
                    .map(([slug, posts]) => (
                        { slug, title: slug, type: attr, radius: posts?.length }
                    )),
                links = outnodes.flatMap(node => prelinks[node.slug]?.map(
                    ({post}) => ({source: post, target: node})
                )),
                linkForce = forceLink(links)
            linkForce.strength(force)
            
            return { nodes: outnodes, links, force: linkForce }
        }

        updateViewport() {
            const xExtent = [
                    (Math.min(...this.nodes.map(d => d.x as number)) - this.padding) * this.scale,
                    (Math.max(...this.nodes.map(d => d.x as number)) + this.padding) * this.scale
                ];
                const yExtent = [
                    (Math.min(...this.nodes.map(d => d.y as number)) - this.padding) * this.scale,
                    (Math.max(...this.nodes.map(d => d.y as number)) + this.padding) * this.scale
                ];

                // Update viewBox
                this.svg.attr("viewBox", `${xExtent[0]} ${yExtent[0]} ${xExtent[1] - xExtent[0]} ${yExtent[1] - yExtent[0]}`);
        }

        genTooltip() {
            return this.svg.append("text")
                .attr("class", "tooltip")
                .style("pointer-events", "none")
                .style("display", "none");
        }

        #updateTooltip(ev: MouseEvent, node: PostNode) {
            this.tooltip
                .style("display", null)
                .attr("x", node.x)
                .attr("y", node.y)
                .text(node.title)
        }

        #disableTooltip(ev: MouseEvent, node: PostNode) {
            this.tooltip.style("display", "none");
        }

        #dragstarted(event: NodeEvent) {
            if (!event.active) this.simulation.alphaTarget(0.5).restart();
            event.subject.fx = event.subject.x;
            event.subject.fy = event.subject.y;
        }

        #dragged(event: NodeEvent) {
            event.subject.fx = event.x;
            event.subject.fy = event.y;
        }

        #dragended(event: NodeEvent) {
            if (!event.active) this.simulation.alphaTarget(0);
            event.subject.fx = undefined
            event.subject.fy = undefined
        }
	}
</script>

<div is="post-graph" data-href={postsRefDataURL} aria-hidden="true" {...props}>
    <svg preserveAspectRatio="xMidYMid meet"></svg>
    {label ? <p>{label}</p> : ''}
</div>

<style lang="scss">
	[is=post-graph] {
		border-radius: .25rem;
		background: theme.$texture-cross;
		border: theme.$color-grey 1px solid;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;

        svg {
            :global(.tooltip) {
                fill: currentColor;
            }
        }

        p {
            position: absolute;
            bottom: 0;
            right: 0;
            font-style: italic;
            padding: .25em .75em;
            backdrop-filter: blur(.25em);
        }
	}
</style>
