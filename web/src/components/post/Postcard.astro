---
import type { PostHydrated } from "@/content"
import { getRelativeLocaleUrl } from "astro:i18n"
import { getLocaleContent } from "@/modules/i18n/content"
import { localeDefs } from "@/modules/i18n/config"
import { Button } from "@/components"
import { SharpPicture } from "@/modules/picture/components"
import { Icon } from "astro-icon/components"
import PLine from "../docs/PLine.astro"

interface Props {
	post: PostHydrated
}

const content = getLocaleContent(
	{
		actionCall: {
			fr: "Lire plus",
			en: "Read more",
		},
		share: {
			fr: "Partager",
			en: "Share",
		},
	},
	Astro
)

const {
	post: {
		hash,
		locale,
		data: { title, description, cover, type },
	},
} = Astro.props
---

<a href={getRelativeLocaleUrl(Astro.currentLocale as string, "/posts/" + hash)}>
	<article title={title}>
		<header>
			<Icon name={{
				pdf: 'mdi:book',
				post: 'mdi:text'
			}[type]} />
			<Button variant="tag">
				{content.share}
				<Icon name="mdi:share-variant" />
			</Button>
		</header>
		{
			cover && (
				<SharpPicture
					src={cover}
					alt="cover"
					class="cover"
					width={1920}
					height={1080}
					computeImg={(img) => img.greyscale()}
				/>
			) 
		}
		<footer>
			<p role="heading">
				<span>{title}</span>
				{Astro.currentLocale != locale && `(${localeDefs[locale][Astro.currentLocale as any]})`}
			</p>
			{description && <PLine text={description} />}
		</footer>
	</article>
</a>

<style lang="scss">
	article {
		--open: 0;
		--transition: .25s ease-in-out;

		border: 1px solid theme.$color-grey;		
		border-radius: .5rem;
		position: relative;
		overflow: hidden;
		display: flex;
		height: 100%;
		align-items: flex-end;
		flex-direction: column;
		justify-content: space-between;
		padding: 1rem;
		box-sizing: border-box;

		&:not(:has(picture)) {
			background-image: theme.$texture-cross;
		}

		header {
			display: flex; 
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
			width: 100%;
			gap: 1rem;
			z-index: 1;

			&>svg {
				color: color-mix(in srgb, theme.$color-black calc(var(--open) * 100%), transparent);
				transition: color var(--transition);
			}
		}

		footer {
			display: flex;
			flex-direction: column;
			gap: .5rem;
			position: relative;
			width: 100%;
			transform: scale(calc(1 + var(--open) * .01));
			transition: transform var(--transition);

			p[role=heading] span {
				text-wrap: balance;
				font-weight: bold;
			}
		}

		// Add gradient mask if picture provided
		&:has(picture) {
			picture {
				height: 100%;
				width: 100%;
				left: 0;
				top: 0;
				z-index: -1;
				position: absolute;
				filter: opacity(calc(.8 - var(--open) * .2));
				transition: filter var(--transition);

				&:not(.loading) {
					mask: linear-gradient(to top, transparent, #fff);
				}
			}

			picture:not(.loading) ~ footer::before {
				background: linear-gradient(to top, theme.$color-white, theme.$color-white 3em, transparent);
				position: absolute;
				content: '';
				width: 200%;
				left: -50%;
				height: 250%;
				top: -100%;
				z-index: -1;
			}

		}

		&:hover {
			--open: 1;
		}
	}
</style>
