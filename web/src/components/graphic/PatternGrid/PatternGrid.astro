---
import { patterns } from "./Patterns.global.astro"
import { getRandom } from "./random"
import type { HTMLAttributes } from "astro/types"
import { gradients } from "./Gradient.global.astro"
import grainUrl from "./grain.svg?url"
import { compute } from "@/modules/compute/compute"
import { p } from "@/modules/composer/server"

const patternValues = Object.values(patterns)

interface Props extends HTMLAttributes<"svg"> {
	width: number
	height: number
	seed: any
	animated?: boolean
}

const { width, height, seed, animated, ...props } = Astro.props

const { maskId, tiles } = await compute([width, height, seed], () => {
	const random = getRandom(seed)
	return {
		maskId: (
			getRandom(seed + "/" + width + "/" + height)() *
			(1 << 16)
		).toString(32),
		tiles: Array.from({ length: width }, (_, x) =>
			Array.from({ length: height }, (_, y) => {
				let rotation = new Array(3).fill(0)
				rotation[~~(3 * random())] = [1, -1][Math.round(random())]
				return {
					x,
					y,
					r: rotation.join(),
					fill: patternValues[
						Math.round(random() * (patternValues.length - 1))
					],
				}
			})
		).flat(),
	}
})
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	viewBox={`0 0 ${width} ${height}`}
	aria-hidden="true"
	mask={`url(${grainUrl})`}
	{...props}
>
	<defs>
		<mask id={maskId} style={{ "--width": width, "--height": height }}>
			<rect width="100%" height="100%" fill="#fff"></rect>
			{
				tiles.map(({ x, y, r, fill }) => (
					<rect
						style={p({
							"--x": x,
							"--y": y,
							"--r": animated && r,
						}).end()}
						fill={fill}
					/>
				))
			}
		</mask>
	</defs>
	<rect
		mask={`url(#${maskId})`}
		width="100%"
		height="100%"
		fill={gradients.main}
	>
	</rect>
</svg>

<style lang="scss">
	svg {
		& mask > rect:not(:first-child) {
			--default-transform: scale(1.01);
			transform: var(--default-transform);
			transform-origin: calc((var(--x) + 0.5) * 1px)
				calc((var(--y) + 0.5) * 1px);
			fill-opacity: 1;
			transition: transform 0.5s ease-in-out;
			transition-delay: calc(
				(var(--x) + var(--y)) / (var(--width) + var(--height)) * 0.5s
			);
			x: calc(var(--x) * 1px);
			y: calc(var(--y) * 1px);
			width: 1px;
			height: 1px;
		}

		&:hover mask > rect:not(:first-child) {
			transform: rotate3d(var(--r), 180deg) var(--default-transform);
		}
	}
</style>
